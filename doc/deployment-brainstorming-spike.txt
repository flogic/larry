class Instance < ActiveRecord::Base
  def deploy(params, deployable = nil)
    return deploy_without_deployable(params) unless deployable
    raise ArgumentError, "Deployable [#{deployable.inspect}] is not associated with this instance" unless deployables.include?(deployable)
    deployable.deploy(params)
  end

  def deploy_without_deployable(params)
    Deployable.deploy_from_instance(self, params)
  end
  
  #TODO:  see below about services snapshotting issues
  def snapshot
    { :services => services.collect(&:name), :parameters => parameters }
  end
end

class Deployable < ActiveRecord::Base
  def self.deploy_from_instance(instance, params)
    create!(:instance => instance).deploy(params)
  end
  
  def snapshot
    return self[:snapshot] if self[:snapshot]
    return {} unless instance
    snapshot = instance.snapshot
  end
  
  # Is this a good idea?:
  #  (1) overriding an existing method 
  #  (2) there are issues with snapshotting services (name might change, service deleted, etc.)
  # we might make this a :through association, but at what time does the creation of :through instances happen? ... maybe when we do a #deploy?
  def services
    snapshot[:services]
  end
  
  def parameters
    snapshot[:parameters]
  end

  def deploy(params)
    expire_current_deployments
    deployments.create!(params)
  end
  
  def expire_current_deployments
    deployments.active.each(&:undeploy)
  end
end

class Deployment < ActiveRecord::Base
  attr_accessor :host
  
  after_create :create_deployed_services

  def undeploy
    end_time = Time.now
    save!
  end
  
  protected
  
  def create_deployed_services
    # TODO: same issues about service name changes, etc. ... do we want to make an actual :through association between Deployable and Service? (which would then affect Service#can_delete?)
    deployable.services.each do |service|
      deployed_services.create!(:host => host, :instance => instance, :service => Service.find_by_name(service))
    end
  end
end