 -> host index sould show apps deployed (host summary?)
 -> views (show, index) for services, instances, deployments, destinations
 -> start adding forms for maintaining data
 -> links to edit forms
 -> deletion links
 -> operations:  un-deploy, deploy, shut down, start host, provision new host, etc.
 
 -> make an even briefer inline view/helper?

 -> looks like services controller doesn't have specs for the alternate formats being delivered

 -> various lists could presumable benefit from pagination / search

 -> I think the puppet-classifer "class"/"service" modeling did a disservice to what I'm trying to do.  Need to unwind this.

 -> there should be a services method for hosts, so that we can easily see what services are supposed to be on the host.  The deployments are, in a sense, the detailed "Actually deployed on the host" services.  So, in a sense, the services are being linked via destinations to deployments on hosts (if the destination is a same-host destination then destination is almost a no-op way to get from service to deployment, which belongs_to host)

 -> would be useful for customer, app, instance to have deployed? predicates so that we can know if they are deployed anywhere

 -> probably useful to have a display of services that are not deployed for instances (why did we not deploy the searchd for this site?)

 -> app.rb:  hosts does a double-method call (demeter!).  Have instance.rb declare :host and delegate to that instead
 
 -> destination.rb:  is this defunct?
 
 -> instance links to services via a requirements many:many model.  Should there be a graph closure from instance (and maybe vice-versa) so that we get the full set?  Maybe this should just be driven from the view.

 -> add linkages to nagios details for a host, service, etc.
 
 -> add linkages from customers to invoicing, e.g.
 
 -> is it possible to link from apps (or instances) to github pages?
 -> is it possible to link apps / customer to trouble ticket pages?
 -> what about linking to PT, e.g.
 
 : this probably speaks to a general facility to associate an URL with a class (customer, app, instance, deployment, host, etc.); in which case it might well be possible to have parsers for the data at the end of those URLs so that we could aggregate data; if we push out RSS, e.g., from larry then it would be possible for larry to be a central dashboard.

 -> favicon.ico
