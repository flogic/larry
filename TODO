
 - display at least downstream tree of dependencies (ul/li ?)
 - add service as depends_on
 - add service as dependent
   /services/1/edges {POST} id => 2 
   -> creates an edge from service 1 to service 2
 - remove dependents service
 - remove depends_on service


   -> ability to manage instance -> service dependencies from the instance show page

 -> we should enforce that only top-level services are linked to instances, everything else is computed ... this means that when edges are created, or when services are linked/unlinked from instances that there may be a cascade of changes to the service set for an instance, which may cascade to deployments, which may cascade out to various hosts -- this would work best if we live in a do/undo world of host deployment (e.g., the way stahnma is setting up puppet manifests)

 -> app show should have more service information
 -> maybe service show should show all_depends_on/all_dependents information as well as immediate?

 -> parameters for services
 -> bubble-up of parameters for services to instances for setting (implies that when we generate a service+parameter list we down-propagate, filling in variables)
 -> parameters being complete are a pre-condition for being able to deploy an instance
 -> parameters could be computed from host (e.g., ip addresses, etc.) ... does this imply bad design of the manifest/recipe that enforces them?  (maybe) ... what about multiple IP addresses for, say, multiple SSL domain names for a web app?
 
 -> would be useful for customer, app, instance to have deployed? predicates so that we can know if they are deployed anywhere

 -> operations:  un-deploy, deploy, shut down, start host, provision new host, etc. (what impact do these have out in the world?)

 ?-> start adding forms for maintaining data
 ?-> links to edit forms
 ?-> deletion links (rules about deployed or not)
 ?-> views (show, index, _summary) for instances, deployments, destinations
 
 -> looks like services controller doesn't have specs for the alternate formats being delivered

 -> could have indexes identify strange situations:  customers with undeployed apps, hosts with no deployments, apps which are not deployed, etc.

 -> I think the puppet-classifer "class"/"service" modeling did a disservice to what I'm trying to do.  Need to unwind this.

 -> there should be a services method for hosts, so that we can easily see what services are supposed to be on the host.  The deployments are, in a sense, the detailed "Actually deployed on the host" services.  So, in a sense, the services are being linked via destinations to deployments on hosts (if the destination is a same-host destination then destination is almost a no-op way to get from service to deployment, which belongs_to host)

 -> generate some sort of YAML dump
 -> import data from YAML dump

 -> probably useful to have a display of services that are not deployed for instances (why did we not deploy the searchd for this site?)

 -> app.rb:  hosts does a double-method call (demeter!).  Have instance.rb declare :host and delegate to that instead
 
 -> destination.rb:  is this defunct?
 
 -> instance links to services via a requirements many:many model.  Should there be a graph closure from instance (and maybe vice-versa) so that we get the full set?  Maybe this should just be driven from the view.

 -> add linkages to nagios details for a host, service, etc.
 
 -> add linkages from customers to invoicing, e.g.
 
 -> is it possible to link from apps (or instances) to github pages?
 -> is it possible to link apps / customer to trouble ticket pages?
 -> what about linking to PT, e.g.
 
 : this probably speaks to a general facility to associate an URL with a class (customer, app, instance, deployment, host, etc.); in which case it might well be possible to have parsers for the data at the end of those URLs so that we could aggregate data; if we push out RSS, e.g., from larry then it would be possible for larry to be a central dashboard.


 -> paginate index pages?  We'll see
 
 -> favicon.ico
